#!/usr/bin/env python3
# This file is placed in the Public Domain


"Console Bot"


import getpass
import logging
import os
import sys
from optparse import OptionParser


from jsonbot.drivers.console.bot import ConsoleBot
from jsonbot.lib.boot import boot
from jsonbot.lib.config import Config
from jsonbot.lib.datadir import getdatadir
from jsonbot.lib.errors import NoOwnerSet, NoSuchCommand
from jsonbot.lib.exit import globalshutdown
from jsonbot.lib.fleet import getfleet
from jsonbot.lib.threads import start_new_thread
from jsonbot.utils.log import setloglevel
from jsonbot.version import getversion


parser = OptionParser(
    usage="usage: %prog [options] <appid>", version="%prog " + getversion()
)


parser.add_option(
    "-d",
    "--datadir",
    type="string",
    default=False,
    dest="datadir",
    help="datadir to use",
)


parser.add_option(
    "-c",
    "--channel",
    type="string",
    default=False,
    dest="channel",
    help="channel to operate on",
)


parser.add_option(
    "-n",
    "--name",
    type="string",
    default=False,
    dest="name",
    help="name of the console bot",
)


parser.add_option(
    "-l",
    "--loglevel",
    type="string",
    default=False,
    dest="loglevel",
    help="logging level",
)


parser.add_option(
    "-f",
    "--fast",
    action="store_true",
    default=False,
    dest="fast",
    help="boot fast (dont load myplugs)",
)


parser.add_option(
    "",
    "--nocolors",
    action="store_true",
    default=False,
    dest="nocolors",
    help="enable the use of colors",
)


parser.add_option(
    "",
    "--fleet",
    action="store_true",
    default=False,
    dest="fleet",
    help="start the fleet",
)


parser.add_option(
    "",
    "--nourl",
    action="store_true",
    default=False,
    dest="nourl",
    help="disable geturl functionality",
)


opts, args = parser.parse_args()
opts.args = args

if not opts.args:
    print(getversion("CONSOLE"))
if opts.datadir:
    if not os.path.isdir(opts.datadir):
        os.mkdir(opts.datadir)
    from jsonbot.lib.datadir import setdatadir
    setdatadir(opts.datadir)


setloglevel(opts.loglevel or "error", not opts.nocolors)


if opts.nourl:
    from jsonbot.utils.url import url_disable
    url_disable()


if opts.fast:
    boot(opts.datadir, fast=True)
else:
    boot(opts.datadir)


name = opts.name or "default-console"
cfg = Config("fleet" + os.sep + name + os.sep + "config")

if not cfg.owner:
    cfg.owner = []
userid = getpass.getuser() + "@" + cfg.uuid


if userid not in cfg.owner:
    cfg.owner.append(userid)
    cfg.save()


try:
    bot = ConsoleBot(cfg)
except NoOwnerSet:
    print("the owner is not set in %s" % cfg.cfile)
    os._exit(1)


if opts.args:
    cmndstring = ";"
    for cmnd in opts.args:
        if "|" in cmnd:
            break
        cmndstring += "%s " % str(cmnd)
    event = bot.make_event(
        userid, opts.channel or userid, cmndstring.strip(), showall=True
    )
    event.nodispatch = False
    try:
        event.execute(True)
    except NoSuchCommand as ex:
        print("no %s command found." % str(ex).strip())
    print("")
    try:
        sys.stdout.close()
    except:
        pass
    os._exit(0)


print("datadir is %s" % getdatadir())
bot.start(False)


if bot.maincfg.dbenable:
    print("dbtype is %s" % bot.maincfg.dbtype)


fleet = getfleet()
fleet.addbot(bot)


if opts.fleet:
    bots = fleet.loadall()
    logging.error("starting fleet %s" % fleet.list())
    start_new_thread(fleet.startall, ())


bot.startshell()
globalshutdown()
