#!/usr/bin/env python3
#
#

""" run multiple bot instances in 1 program. """
# bootstrap

import logging
import os
import signal
import sys
import time
import warnings

import jsonbot
from jsonbot.lib.boot import boot
from jsonbot.lib.datadir import getdatadir, makedirs, setdatadir
from jsonbot.lib.exit import globalshutdown
from jsonbot.lib.fleet import getfleet
from jsonbot.lib.partyline import partyline
from jsonbot.lib.threads import start_new_thread
from jsonbot.lib.users import users_boot
from jsonbot.utils.exception import handle_exception
from jsonbot.utils.log import setloglevel
from jsonbot.utils.mainloop import mainloop
from jsonbot.utils.opts import makefleetopts
from jsonbot.version import getversion

warnings.simplefilter("ignore")


sys.path.insert(0, os.getcwd())

# basic imports


# options parser


opts = makefleetopts()


if opts.datadir:
    setdatadir(opts.datadir)


print(getversion("FLEET"))

# jsonbot imports


fleet = getfleet(opts.datadir)
if opts.all or opts.show:
    avail = fleet.avail()
    if avail:
        sys.stdout.write("available bots: " + ", ".join(avail) + ".")
    else:
        sys.stdout.write("no bots available.")

if opts.all:
    print("")
    os._exit(0)

# provide sigterm support


def dostop(a, b):
    """sig handler"""
    globalshutdown()


signal.signal(signal.SIGTERM, dostop)

if not fleet.avail():
    logging.error("fleet - no bots found.")
    os._exit(1)

# loglevel


setloglevel(opts.loglevel or "warn", not opts.nocolors)

# start the fleet

boot(opts.datadir)

if opts.owner:
    users = users_boot()
    users.make_owner(opts.owner)


def doresume():
    try:
        fleet.resume(opts.doresume)
        fleet.startok.wait()
        partyline.resume(opts.doresume)
        time.sleep(1)
        os.unlink(opts.doresume)
    except:
        handle_exception()


if opts.doresume:
    start_new_thread(doresume, ())
else:
    start_new_thread(fleet.boot, (opts.args, ["tornado", "console"]))

mainloop()
